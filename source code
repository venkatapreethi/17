# Import required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv("credit_card_fraud_sample.csv")

# -------------------------------
# 1. Basic Overview and Summary
# -------------------------------
print("First 5 Rows:\n", df.head())
print("\nDataset Info:")
print(df.info())
print("\nSummary Statistics:\n", df.describe())

# -------------------------------
# 2. Univariate Analysis
# -------------------------------
# Histogram for Transaction Amounts
plt.figure(figsize=(8, 4))
sns.histplot(df['Amount'], bins=10, kde=True, color='skyblue')
plt.title("Distribution of Transaction Amounts")
plt.xlabel("Amount")
plt.ylabel("Frequency")
plt.grid(True)
plt.tight_layout()
plt.show()

# -------------------------------
# 3. Bivariate Analysis
# -------------------------------
# Boxplot of Amount by Fraud Status
plt.figure(figsize=(6, 4))
sns.boxplot(x='Is_Fraud', y='Amount', data=df)
plt.title("Transaction Amounts by Fraud Status")
plt.xlabel("Is Fraud")
plt.ylabel("Amount")
plt.tight_layout()
plt.show()

# Scatter plot: Time vs Amount by Fraud
plt.figure(figsize=(8, 5))
sns.scatterplot(data=df, x='Time', y='Amount', hue='Is_Fraud', palette='coolwarm', s=100)
plt.title("Time vs Amount by Fraud Status")
plt.xlabel("Time")
plt.ylabel("Amount")
plt.tight_layout()
plt.show()

# -------------------------------
# 4. Correlation Analysis
# -------------------------------
plt.figure(figsize=(5, 4))
numeric_df = df.select_dtypes(include='number')  # Only numeric columns
sns.heatmap(numeric_df.corr(), annot=True, cmap='Blues', fmt=".2f")
plt.title("Correlation Matrix")
plt.tight_layout()
plt.show()

# -------------------------------
# 5. Class Imbalance Visualization
# -------------------------------
fraud_counts = df['Is_Fraud'].value_counts()
plt.figure(figsize=(5, 4))
fraud_counts.plot(kind='bar', color=['green', 'red'])
plt.title("Fraud vs Non-Fraud Transaction Counts")
plt.xticks(ticks=[0, 1], labels=['Non-Fraud (0)', 'Fraud (1)'], rotation=0)
plt.ylabel("Count")
plt.tight_layout()
plt.show()

# -------------------------------
# 6. Save Preprocessed Data (Optional)
# -------------------------------
df.to_csv("preprocessed_credit_card_data.csv", index=False)
print("âœ… Preprocessed data saved to 'preprocessed_credit_card_data.csv'")
